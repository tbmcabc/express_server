class ByteArray {
	
	constructor(buf) {
		if (buf){
			this._buffer = Buffer.from(buf)
		}
		else
			this._buffer = Buffer.alloc(64 * 1024)

		this._position = 0;
	}

	reset() {
		this._position = 0;
	}

	getBuffer() {
		let b = Buffer.alloc(this._position);
		this._buffer.copy(b, 0, 0, this._length);
		return b;
	}

	realloc(len) {
		if (this._position + len > this._buffer.length) {
			var newLength = this._length + Math.max(len, 64 * 1024);
			var buffer = Buffer.alloc(newLength);
			this._buffer.copy(buffer);
			this._buffer = buffer;
		}
	}

	writeUInt8(value) {
		this.realloc(1);
		this._buffer.writeUInt8(value, this._position);
		this._position += 1;
	}

	writeUInt16(value) {
		this.realloc(2);
		this._buffer.writeUInt16LE(value, this._position);
		this._position += 2;	
	}

	writeUInt32(value) {
		this.realloc(4);
		this._buffer.writeUInt32LE(value, this._position);
		this._position += 4;
	}

	writeUInt64(value) {
		this.realloc(1);
		let number = value.toString()
		this.writeUInt8(number.length)
		this.writeString(number)
	}	

	writeInt8(value) {
		this.realloc(1);
		this._buffer.writeInt8(value, this._position);
		this._position += 1;	
	}

	writeInt16(value) {
		this.realloc(2);
		this._buffer.writeInt16LE(value, this._position);
		this._position += 2;	
	}

	writeInt32(value) {
		this.realloc(4);
		this._buffer.writeInt32LE(value, this._position);
		this._position += 4;
	}

	writeInt64(value) {
		this.realloc(1);
		let number = value.toString()
		this.writeUInt8(number.length)
		this.writeString(number)
	}

	writeFloat(value) {
		this.realloc(4);
		this._buffer.writeFloatLE(value, this._position);
		this._position += 4;
	}

	writeDouble(value) {
		this.realloc(8);
		this._buffer.writeDoubleLE(value, this._position);
		this._position += 8;
	}

	writeString(value) {
		let buf = Buffer.from(value, 'utf8');
		this.writeInt32(buf.length)
		this.realloc(buf.length);
		buf.copy(this._buffer, this._position);
		this._position += buf.length;
	}

	writeBuffer(value) {
		this.realloc(value.length);
		value.copy(this._buffer, this._position);
		this._position += value.length;
	}

	readUInt8() {
		let v = this._buffer.readUInt8(this._position);
		this._position += 1;
		return v;
	}

	readUInt16() {
		let v = this._buffer.readUInt16LE(this._position);
		this._position += 2;
		return v;
	}

	readUInt32() {
		let v = this._buffer.readUInt32LE(this._position);
		this._position += 4;
		return v;
	}

	readUInt64() {
		let len = this.readUInt8();
		return Number(this.readString(len));
	}

	readInt8() {
		let v = this._buffer.readInt8(this._position);
		this._position += 1;
		return v;
	}

	readInt16() {
		let v = this._buffer.readInt16LE(this._position);
		this._position += 2;
		return v;
	}

	readInt32() {
		let v = this._buffer.readInt32LE(this._position);
		this._position += 4;
		return v;
	}

	readInt64() {
		let len = this.readUInt8();
		return Number(this.readString(len));
	}

	readFloat() {
		let v = this._buffer.readFloatLE(this._position);
		this._position += 4;
		return v;
	}

	readDouble() {
		let v = this._buffer.readDoubleLE(this._position);
		this._position += 8;
		return v;
	}

	readString() {
		let len = this.readInt32();
		let v = this._buffer.toString('utf8', this._position, this._position + len);
		this._position += len;
		return v;
	}

	readBuffer(len, buffer) {
		this._buffer.copy(buffer, 0, this._position, this._position + len);
		this._position += len;
	}
}

module.exports = ByteArray;