let ByteArray = require("./byte_array")

let MP_INT8            = 0xd0;
let MP_INT16           = 0xd1;
let MP_INT32           = 0xd2;
let MP_INT64           = 0xd3;
let MP_UINT8           = 0xcc;
let MP_UINT16          = 0xcd;
let MP_UINT32          = 0xce;
let MP_UINT64          = 0xcf;
let MP_FIXNUM          = 0x00;
let MP_NEGATIVE_FIXNUM = 0xe0;

//! nil
let MP_NULL = 0xc0;

//! boolean
let MP_FALSE = 0xc2;
let MP_TRUE  = 0xc3;

//! Floating point
let MP_FLOAT  = 0xca;
let MP_DOUBLE = 0xcb;

/*****************************************************
* Variable length types
*****************************************************/

//! Raw bytes
let MP_RAW16  = 0xda;
let MP_RAW32  = 0xdb;
let MP_FIXRAW = 0xa0; //!< Last 5 bits is size

/*****************************************************
* Container types
*****************************************************/

//! Arrays
let MP_ARRAY16  = 0xdc;
let MP_ARRAY32  = 0xdd;
let MP_FIXARRAY = 0x90; //<! Lst 4 bits is size

//! Maps
let MP_MAP16  = 0xde;
let MP_MAP32  = 0xdf;
let MP_FIXMAP = 0x80; //<! Last 4 bits is size

//! Some helper bitmasks
let MAX_4BIT  = 0xf;
let MAX_5BIT  = 0x1f;
let MAX_7BIT  = 0x7f;
let MAX_8BIT  = 0xff;
let MAX_15BIT = 0x7fff;
let MAX_16BIT = 0xffff;
let MAX_31BIT = 0x7fffffff;
let MAX_32BIT = 0xffffffff;

class MsgPack extends ByteArray {

    constructor(buf){
        super(buf);
    }

    packProtoID(value){
        this.writeInt32(value);
    }

    packUInt64(value) {
        if (value <= MAX_7BIT) {
            this.writeUInt8(value | MP_FIXNUM);
        } else if (value <= MAX_8BIT) {
            this.writeUInt8(MP_UINT8);
            this.writeUInt8(value);
        } else if (value <= MAX_16BIT) {
            this.writeUInt8(MP_UINT16);
            this.writeUInt16(value);
        } else if (value <= MAX_32BIT) {
            this.writeUInt8(MP_UINT32);
            this.writeUInt32(value);
        } else {
            this.writeUInt8(MP_UINT64);
            this.writeUInt64(value);
        }        
    }

    packInt64(value) {
        if (value >= 0) {
            if (value <= MAX_7BIT) {
                this.writeUInt8(value | MP_FIXNUM);
            } else if (value <= MAX_15BIT) {
                this.writeUInt8(MP_INT16);
                this.writeInt16(value);
            } else if (value <= MAX_31BIT) {
                this.writeUInt8(MP_INT32);
                this.writeInt32(value);
            } else {
                this.writeUInt8(MP_INT64);
                this.writeInt64(value);
            }
        } else {
            if (value >= -(MAX_5BIT + 1)) {
                this.writeInt8(value | MP_NEGATIVE_FIXNUM);
            } else if (value >= -(MAX_7BIT + 1)) {
                this.writeUInt8(MP_INT8);
                this.writeInt8(value)
            } else if (value >= -(MAX_15BIT + 1)) {
                this.writeUInt8(MP_INT16);
                this.writeInt16(value);
            } else if (value >= -(MAX_31BIT + 1)) {
                this.writeUInt8(MP_INT32);
                this.writeInt32(value);
            } else {
                this.writeUInt8(MP_INT64);
                this.writeInt64(value);
            }
        }
    }

    packBool(value) {
        this.writeUInt8(value ? MP_TRUE : MP_FALSE);
    }

    packFloat(value) {
        this.writeUInt8(MP_FLOAT);
        this.writeFloat(value);
    }

    packDouble(value) {
        this.writeUInt8(MP_DOUBLE);
        this.writeDouble(value);
    }

    packRawbuffer(value) {
        if (value.byteLength <= MAX_5BIT) {
            this.writeUInt8(value.byteLength | MP_FIXRAW);
        } else if (value.byteLength <= MAX_16BIT) {
            this.writeUInt8(MP_RAW16)
            this.writeUInt16(value.byteLength);
        } else {
            this.writeUInt8(MP_RAW32)
            this.writeUInt32(value.byteLength);
        }
        this.writeBuffer(value);
    }

    packString(value) {
        this.writeString(value)
    }

    unpackProtoID(){
        return this.readInt32();
    }

    unpackNumber(){
        var header = this.readUInt8();
        if (header <= MAX_7BIT) {
		    return header;
	    }

        if (header == MP_UINT8) {
            return this.readUInt8();
        } else if (header == MP_UINT16) {
            return this.readUInt16();
        } else if (header == MP_UINT32) {
            return this.readUInt32();
        } else if (header == MP_UINT64) {
            return this.readUInt64();
        } else if (header == MP_INT8) {
            return this.readInt8();
        } else if (header == MP_INT16) {
            return this.readInt16();
        } else if (header ==  MP_INT32) {
            return this.readInt32();
        } else if (header == MP_INT64) {
            return this.readInt64();
        } else if (header == MP_FLOAT) {
            return this.readFloat();
        } else if (header == MP_DOUBLE) {
            return this.readDouble();
        } else {
            throw "invalid data type" + header;
        }
    }

    unpackRawbuffer() {
        var header = this.readUInt8();
        var length = 0;
        if ((header & 0xE0) == MP_FIXRAW) {
            length = header - MP_FIXRAW;
        } else if (header == MP_RAW16) {
            length = this.readUInt16();
        } else if (header == MP_RAW32) {
            length = this.readUInt32();
        } else {
            throw "unpackRawbuffer not implements";
        }

        var buf = Buffer.allocUnsafe(length);
        this.readBuffer(length, buf);
        return buf;
    }

    unpackString() {
        return this.readString();
    }    

    unpackBool() {
        var header = this.readUInt8();
        if (header == MP_TRUE) {
            return true;
        } else if (header == MP_FALSE) {
            return false;
        } else {
            throw "invalid data type" + header;
        }
    }
}

module.exports = MsgPack;