
const MsgPack = require("./msg_pack")

class Dispatcher {

    constructor(proto){
        this._msgHandler = {}
        this._PROTO = proto

        this._msgPacker = new MsgPack();
    }

    procMsg(ws, buf, ext) {
        let msgPack = new MsgPack(buf)
        let protoId = msgPack.unpackNumber();

        let msgName = this._PROTO.ProtoNameMap[protoId]
        if(!msgName){
            console.log(`protoId: ${protoId} is not define`)
            return
        }

        let handlerList = this._msgHandler[protoId];
        if (!handlerList || handlerList.stage != ws.stage) {
            return;
        }

        let msg = new this._PROTO[msgName]();
        msg.__buf = buf;
        msg.Unpack(msgPack)

        for (let i in handlerList.callback) {
            let cb = handlerList.callback[i];
            cb(ws, msg, ext)
        }
    }

    regMsgHandler(protoId, callback, stage) {
        let handlerList = this._msgHandler[protoId];
        if (!handlerList) {
            handlerList = {}
            handlerList.stage = stage
            handlerList.callback = []
        }
        handlerList.callback.push(callback);
        this._msgHandler[protoId] = handlerList;
    }
}

module.exports = Dispatcher;
