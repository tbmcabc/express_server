const Dispatcher = require("./dispatcher")
let WebSocket = require("ws")
let util = require("util")

class Net_Client extends Dispatcher {

    constructor(name, proto){
        super(proto);
        this._name = name
        this._ws = {}
        this._reConns = {}

        this.checkConn()
    }

    getAgency(id){
        if (id == null) return;
        return this._ws[id];
    }

    //定时检查有没有断开的连接
    checkConn(){
        clearTimeout(this._checkTimer)
        for (let key in this._reConns) {
            this.addConn(key, this._reConns[key])
        }
        this._reConns = { }
        this._checkTimer = setTimeout(this.checkConn.bind(this), 5000)
    }

    updateServer(srvlist){
        let connItems = {}
        for (let i = 0; i < srvlist.length; i++) {
            let item = srvlist[i]
            connItems[item.id] = util.format("ws://%s:%d", item.ip, item.port)
        }
        
        let removeClis = {}
        for (let key in this._ws) {
            let ws = this._ws[key]
            if (connItems[ws.id] == null || ws.url != connItems[ws.id])
                removeClis[ws.id] = true
            else
                delete connItems[ws.id]
        }
        //首先处理删除
        for (let key in removeClis) {
            let ws = this._ws[key]
            ws.selfClose()
            delete this._ws[key]
        }

        //增加连接
        for (let key in connItems) {
            this.addConn(key, connItems[key])   
        }
        this._reConns = {}
        this.checkConn()
    }

    onConnOpen(ws){ }

    addConn(id, url){
        let self = this

        let ws = new WebSocket(url)
        ws.id = id

        ws.on('open', function () {
            console.log(`connected to ${self._name}_${ws.id} success.`);
            self.onConnOpen(ws)
        });     

        ws.on('error', function (err) {
            console.log(`${self._name}_${ws.id} ${err}}`);
            ws.close()
        });

        ws.on('close', function (err) {
            if (!ws._isSelfClose){
                self._reConns[ws.id] = ws.url
                console.log(`${self._name}_${ws.id} disconnected after 5s try...`);
            }
            else
                console.log(`${self._name}_${ws.id} disconnected`);
            delete self._ws[ws.id]
        });

        ws.on('message', function (data) {
            try{
                self.procMsg(ws, data)
            }catch(err){
                console.log(err)
            }
        });

        ws.selfClose = function(){
            ws._isSelfClose = true
            ws.close()
        }

        ws.sendMsg = function(msg){
            msg.Pack(self._msgPacker)
            ws.send(self._msgPacker.getBuffer())
        }

        this._ws[id] = ws
    }

    sendSingleMsg(msg){
        if (!this._ws[0]) return false;
        try{
            this._ws[0].sendMsg(msg)
        }catch(err){
            console.log(`${this._name} sendSingleMsg ${msg} ${err}`);
        }
        return true;
    }

    sendAllMsg(msg){
        if(Object.keys(this._ws).length == 0) return false;
        try{
            msg.Pack(this._msgPacker)
            let buf = this._msgPacker.getBuffer()

            for (let key in this._ws) {
                this._ws[key].send(buf)
            }
        } catch(err){
            console.log(`${this._name} sendAllMsg ${msg} ${err}`);
        }
        return true;
    }

    sendTurnMsg(msg){
        let ids = Object.keys(this._ws)
        if (ids.length == 0) return false;
        if(!this._turnIdx || this._turnIdx >= ids.length)
            this._turnIdx = 0
        try{
            let idkey = ids[this._turnIdx]
            this._ws[idkey].sendMsg(msg)
        }catch(err){
            console.log(`${this._name} sendTurnMsg ${msg} ${err}`);   
        }
        this._turnIdx ++;
        return true
    }

    sendForwardMsg(pid, sid, cmsg){
        let msg = new this._PROTO.COM_ForwardMsg();
        msg.playerid = pid;
        msg.to_sid = sid;

        cmsg.Pack(this._msgPacker)
        msg.buf = this._msgPacker.getBuffer()
        this.sendTurnMsg(msg)
    }

    sendPassMsg(sid, pmsg){
        let msg = new this._PROTO.COM_PassMsg()
        msg.to_sid = sid

        pmsg.Pack(this._msgPacker)
        msg.buf = this._msgPacker.getBuffer()
       this.sendTurnMsg(msg) 
    }

    sendForwardData(pid, sid, cbuf){
        let msg = new this._PROTO.COM_ForwardMsg();
        msg.playerid = pid;
        msg.to_sid = sid;
        msg.buf = cbuf;
        this.sendTurnMsg(msg)
    }

    sendMsgToIdServer(id, msg){
        let agency = this.getAgency(id)
        if(!agency) return false;
        agency.sendMsg(msg)
        return true;
    }

    sendDataToIdServer(id, data){
        let agency = this.getAgency(id)
        if(!agency) return false;
        agency.send(data)
        return true;
    }
}


module.exports = Net_Client;