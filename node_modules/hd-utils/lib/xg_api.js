const util   = require('util')
const http = require("http")
const MD5 = require("./md5")

let sendHttpPostRequest = function (host, path, content, callback) {
    let options = {  
        method: "POST",  
        host: "openapi.xg.qq.com",  
        port: 80,  
        path: path,
        headers: {  
            "Content-Type": 'application/x-www-form-urlencoded;',  
        }  
    };  

    let reqq = http.request(options, function(ress){
    	var resdata = ""
        ress.setEncoding('utf8');
        ress.on('data', function(data){
            resdata += data
        });
        ress.on('error', function(err){
            callback(err, null);
        });
        ress.on('end', function(err){
            callback(null, resdata);
        });
    });

    reqq.on('error', function(err){
        callback(err,null);
    });

    reqq.write(content);
    reqq.end();
}
let sendHttpGetRequest = function (path, content, callback) {
    console.log(path)
    console.log(content)
    let options = {  
        method: "GET",  
        host: "openapi.xg.qq.com",  
        port: 80,  
        path: path,
        headers: {  
            "Content-Type": 'application/x-www-form-urlencoded;',  
        }  
    };  

    let reqq = http.request(options, function(ress){
        var resdata = ""
        ress.setEncoding('utf8');
        ress.on('data', function(data){
            resdata += data
        });
        ress.on('error', function(err){
            callback(err, null);
        });
        ress.on('end', function(err){
            callback(null, resdata);
        });
    });

    reqq.on('error', function(err){
        callback(err,null);
    });

    reqq.write(content);
    reqq.end();
}
class XGAPI {
	constructor(xg_cfg){
		this.access_id = xg_cfg.access_id
		this.access_key = xg_cfg.access_key
		this.secret_key = xg_cfg.secret_key
	}

	sendXGPost(path, params, callback){
		let real_path = util.format("%s?access_id=%s&identifier=%s&usersig=%s&random=%d&contenttype=json",
			path,this.access_id, this.timestamp, this.admin_sig,Math.floor(Math.random() * 1000));

		sendHttpPostRequest(host, real_path, params, callback)
	}

    push_to_single_android(xg_token, message, sendtime, callback){
        if (sendtime == null) sendtime = new Date().toLocaleString();
        let timestamp = Math.floor(new Date().getTime() / 1000) + ""
        let str_sign = util.format("GETopenapi.xg.qq.com/v2/push/single_deviceaccess_id=%sdevice_token=%smessage=%smessage_type=1send_time=%stimestamp=%s%s", this.access_id, xg_token, message, sendtime, timestamp, this.secret_key)
        let sign = MD5.Get_MD5(str_sign)
        let url = util.format("http://openapi.xg.qq.com/v2/push/single_device?access_id=%s&timestamp=%s&device_token=%s&message_type=1&send_time=%s&message=%s&sign=%s", this.access_id, timestamp, xg_token, encodeURIComponent(sendtime), encodeURIComponent(message), sign)
        http.get(url, (res) => {
            res.setEncoding('utf8');
            let rawData = '';
            res.on('data', (chunk) => { rawData += chunk; });
            res.on('end', () => {
                if(callback) return callback(rawData)
            });
        }).on('error', (e) => {
            console.error(`错误: ${e.message}`);
        });
    }

    push_to_single_ios(xg_token, message, sendtime, callback){
        if (sendtime == null) sendtime = new Date().toLocaleString();
        let timestamp = Math.floor(new Date().getTime() / 1000) + ""
        let str_sign = util.format("GETopenapi.xg.qq.com/v2/push/single_deviceaccess_id=%sdevice_token=%senvironment=2message=%smessage_type=0send_time=%stimestamp=%s%s", this.access_id, xg_token, message, sendtime, timestamp, this.secret_key)
        let sign = MD5.Get_MD5(str_sign)
        let url = util.format("http://openapi.xg.qq.com/v2/push/single_device?access_id=%s&timestamp=%s&device_token=%s&environment=2&message_type=0&send_time=%s&message=%s&sign=%s", this.access_id, timestamp, xg_token, encodeURIComponent(sendtime), encodeURIComponent(message), sign)
        http.get(url, (res) => {
            res.setEncoding('utf8');
            let rawData = '';
            res.on('data', (chunk) => { rawData += chunk; });
            res.on('end', () => {
               if(callback) return callback(rawData) 
            });
        }).on('error', (e) => {
            console.error(`错误: ${e.message}`);
        });
    }

    push_to_all_android(message, callback){
        let timestamp = Math.floor(new Date().getTime() / 1000) + ""
        let str_sign = util.format("GETopenapi.xg.qq.com/v2/push/all_deviceaccess_id=%smessage=%smessage_type=1timestamp=%s%s", this.access_id, message, timestamp, this.secret_key)
        let sign = MD5.Get_MD5(str_sign)
        let url = util.format("http://openapi.xg.qq.com/v2/push/all_device?access_id=%s&timestamp=%s&message_type=1&message=%s&sign=%s", this.access_id, timestamp, encodeURIComponent(message), sign)
        http.get(url, (res) => {
            res.setEncoding('utf8');
            let rawData = '';
            res.on('data', (chunk) => { rawData += chunk; });
            res.on('end', () => {
                if(callback) return callback(rawData)
            });
        }).on('error', (e) => {
            console.error(`错误: ${e.message}`);
        });
    }

    push_to_all_ios(message, callback){
        let timestamp = Math.floor(new Date().getTime() / 1000) + ""
        let str_sign = util.format("GETopenapi.xg.qq.com/v2/push/all_deviceaccess_id=%senvironment=1message=%smessage_type=0timestamp=%s%s", this.access_id, message, timestamp, this.secret_key)
        let sign = MD5.Get_MD5(str_sign)
        let url = util.format("http://openapi.xg.qq.com/v2/push/all_device?access_id=%s&timestamp=%s&environment=1&message_type=0&message=%s&sign=%s", this.access_id, timestamp, encodeURIComponent(message), sign)
        http.get(url, (res) => {
            res.setEncoding('utf8');
            let rawData = '';
            res.on('data', (chunk) => { rawData += chunk; });
            res.on('end', () => {
                if(callback) return callback(rawData)
            });
        }).on('error', (e) => {
            console.error(`错误: ${e.message}`);
        });
    }

}

module.exports = XGAPI;



